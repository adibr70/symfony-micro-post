In .ssh/config poti pune alias

Host Babylonia
      HostName 222.100.100.100 (Ip ul serverului)
      User ubuntu
      IdentityFile ˜/.ssh/nume_fisier

********************************************


*** PRIMA DATA FACEM UPDATE LA SERVERUL LINUX ***

1. Instalare update

- sudo apt-get update



*** APOI INSTALAM APACHE ***

2. Instalare apache

- sudo apt-get install apache2

3. Verificare instalare apache

- sudo apache2ctl configtest

Daca da mesaj de eroare ca nu este steak ServerName editam apache2.conf

- sudo nano /etc/apache2/apache2.conf

Si introducem la finally fisierului ServerName xxx.xxx.xxx.xxx (IP ul seververului)
Apoi dam restart la serverul apache
- sudo service apache2 restart

4. Dam accès la porturi ventru server ul apache

- sudo ufw allow in "Apache Full"

5. Verificam daca este permis accesul la serverul web

- sudo ufw app info "Apache Full"



*** APOI INSTALAM PHP ***

6. Instalare PHP

- sudo add-apt-repository ppa:ondrej/php

7. Facem update
- sudo apt-get -y update

8. Instalare propriuzisa PHP

- sudo apt-get -y install php7.4 php7.4-common php7.4-curl php7.4-xml php7.4-zip php7.4-gd php7.4-mysql php7.4-mbstring

9. Enable PHP for apache

- sudo a2enmod php7.4

10. Restart apache

- sudo service apache2 restart

11. Check PHP version

- php -v



*** APOI INSTALAM MySQL ***

12. Instalare MySQL server

- sudo apt-get install mysql-server 

13. Connect to mysql server ca sa creeam o baza de date

- mysql -u debian-sys-maint -p   ---Userul si pasword sunt in cnf file-> ca sa le vezi
- sudo vim /etc/mysql/debian.cnf
debian-sys-maint / zFIpHkkqg0iVFZgr

CREATE DATABASE `micro-post`;

CTRL-D ca sa iesi din promterul mysql


*** ADDING VIRTUAL HOST CONFIGURATION

<VirtualHost *:80>
    SetEnv APP_ENV prod
    SetEnv DATABASE_URL mysql://debian-sys-maint:zFIpHkkqg0iVFZgr@127.0.0.1:3306/micro-post
    SetEnv MAILER_URL smtp://micropost@adibr70.ro:!Braila39@mail.adibr70.ro:465/?timeout=60&encryption=ssl
    SetEnv MAILER_FROM micropost@adibr70.ro
    DocumentRoot /var/www/micropost/public

    <Directory />
        Options FollowSymLinks
    </Directory>

    <Directory /var/www/micropost/public>
        RewriteEngine On
        RewriteBase /
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteRule ^(.*)$ index.php [QSA,L]

        AllowOverride All
        Require all granted
    </Directory>

    ErrorLog /var/log/apache2/project_error.log
    CustomLog /var/log/apache2/project_access.log combined
</VirtualHost>

14. creem un fisier config in sites-enabled (normal trebuia creat in sites-availabled si faut un symlink in sites-enabled)

- cd /etc/apache2/sites-enabled/
- sudo touch micro-post.conf
- sudo nano micro-post.conf is face past la <VirtualHost ...

*** ACUM TRANSFERAM DIN GITHUB TOATE FISIERELE IN FOLDERUL CREAT PE AWS ***

15. Incercam sa vedem daca ne conectam la GitHub

- ssh -T git@github.com

Daca nu putem inseamna ca cheia de conectare la GitHub nu exista si pe serverul AWS
Ne deconectam de la AWS cu CTRL-D
Si copies cheia din local pe AWS folosind secure copy -> scp

- scp ~/.ssh/id_rsa-github ubuntu@15.237.128.107:~/.ssh/

Apoi de public key

- scp ~/.ssh/id_rsa-github.pub ubuntu@15.237.128.107:~/.ssh/

Apoi ne conectam la AWS

- ssh aws

Si cream config file in ~/.ssh/ pe masina AWS

- sudo nano ~/.ssh/config

Si scrim in fisierul config
Host github.com
   IdentityFile ~/.ssh/id_rsa-github

Salvam fisierul si incercam sa ne conectam la GitHub

- ssh -T git@github.com

*** COPIERE FISIERE DE PE GITHUB ***

Copierea o facem in /var/www/ pe serverul aws

- cd /var/www/

- sudo git clone git@github.com:adibr70/micro-post-aws.git micropost_current
Nu mi a mers asa sa clonez -> a mers linkul cu https -> 
 - sudo git clone https://github.com/adibr70/micro-post-aws.git micropost_current
Mare greseala mare!!! Nu mi a mers ventru ca nu aveam drep de scriere in folderul .git pentru userul ubuntu si am folosit comanda sudo git clone ... care nu merge folosita daca ai facet cheia RSA fara sudo asa cum o facusem eu pe MAC. Dupa ce am dat drept de autor pentru ubuntu in folderol .git
 - sudo chown -R ubuntu:ubuntu .git
au mers comenzile git fara sudo si fara sa mi dea eroarea ca nu e autorizat accesul pe github

Creem un symbolik link sau symlink care sa puncteze catre locul unde am salvat fisierele

 - sudo ln -s /var/www/micropost_current /var/www/micropost

Cu -> ls -all vezi fisierele si symlink urile din director


*** INSTALARE DEPENDENCIES ***
 
Merger in directorul (symlink-ul) creat

- cd /var/www/micropost

- sudo apt install composer

- composer install -n --prefer-dist


*** INSTALARE NODE SI YARN ***

- curl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -
- sudo apt-get install -y nodejs

- curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -

- echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

- sudo apt-get update && sudo apt-get install yarn

- sudo yarn install && sudo yarn run encore production


*** REMOVE DEFAULT CONFIG FILE APACHE ***

- sudo rm /etc/apache2/sites-enabled/000-default.conf


*** CHECK IF MOD REWRITE IS ENABLE IN APACHE ***
- sudo a2enmod rewrite
Apoi restart apache
- sudo systemctl restart apache2

*** RUNNING MIGRATIONS ON SERVER ***

First setup the environment variables
- export APP_ENV=prod
Ca sa vedem ca a fost memorat
- echo $APP_ENV

Apoi
- export DATABASE_URL=mysql://debian-sys-maint:zFIpHkkqg0iVFZgr@127.0.0.1:3306/micro-post 

Apoi dupa ce le am memorat:
-APP_ENV=$APP_ENV DATABASE_URL=$DATABASE_URL php bin/console doctrine:migrations:migrate 

Add permission to apache in www folder
Verificam cine e user in www -> ls -all

Apoi
- sudo chown -R www-data:www-data /var/www/micropost_current
- sudo chown -h www-data:www-data /var/www/micropost
*** !!! Correct e sa creem un grup in care sa fie membre ubuntu si www-data si aces grup sa fie pus la micropost
Deci:
- sudo groupadd apache_git
- sudo adduser ubuntu apache_git
- sudo adduser www-data apache_git
Cu - groups nume_user vedem in ce grupuri e userul 
Apoi schimbam ownerul si grupul pentru micropost
- sudo chown -R www-data:apache_git /var/www/micropost_current
- sudo chown -h www-data:apache_git /var/www/micropost
Si dam drepturi de scriere pentru grup (chmod g+rwx)
- sudo chmod g+w micropost_current
Dupa care log-out si log-in ca sa putem avea noire drepturi

Erorile le putem vedea cu:
tail var/log/prod.log

Pentru a avea mereu variabilele de mediu:
- sudo nano ~/.bash_profile
Si adaugam:
export APP_ENV=prod
export DATABASE_URL=mysql://debian-sys-maint:zFIpHkkqg0iVFZgr@127.0.0.1:3306/micro-post
export MAILER_FROM=micropost@adibr70.ro
export MAILER_URL=smtp://micropost@adibr70.ro:!Braila39@mail.adibr70.ro:465/?timeout=60&encryption=ssl 

*** !!! Pentru translate e envoi de modulul intl !!! *** 

 - sudo apt-get install php7.4-intl
Sau mai bine
 - sudo composer require symfony/polyfill-intl-messageformatter


*** PENTRU CIRCLECI ***

- ai in folderul .circleci fisierul config.yml - care contine toate comenzile necesare
Se creeaza prima data un job unde se testeaza testele phpunit apoi se face deploy - se crease din nou un server unde se pune tot si daca totul e bine se urca pe serverul aws

- mai sunt in bin/deploy doua fisiere deploy.sh si pre_deploy.sh unde sunt comenzile ce se executa pe serverul aws

- foarte important -> de pus in circleci variabilele -> in Project Settings -> Environment Variables -> DROPLET_IP (ip-ul serverului aws) si DROPLET_USER (userul de pe serverul aws - in cazul meu ubuntu)

- la fel de important e la SSH Keys sa bagi cheia SSH pentru serverul aws

- pentru rsync e important ca userul (ubuntu in cazul meu) sa aiba drept de scriere in folderul de pe serverul aws unde se pun fisierele


